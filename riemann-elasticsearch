#!/usr/bin/env node
'use strict';

const http  = require('http');
const async = require('neo-async');
const _     = require('lodash');
const r     = new (require('./_runner'))({
    'es-host': { default: 'localhost' },
    'es-port': { default: '9200' },
    'es-search-index': { default: [ '_all' ], multi: true }
});

const get = (uri, cb) => {
    http.get(uri, response => {
        let data = '';
        response.on('data', chunk => data += chunk.toString());
        response.on('end', () => {
            try {
                cb(null, JSON.parse(data));
            } catch (e) {
                cb(e);
            }
        });
    }).on('error', cb);
};

r.run((opts, r, cb) => {
    const host    = `${opts[ 'es-host' ]}:${opts[ 'es-port' ]}`;
    const baseUrl = `http://${host}/`;

    async.parallel([
        (cb) => {
            get(`${baseUrl}_cluster/health`, (err, json) => {
                if (err) return cb(err);

                _.each(_.omit(json, 'timed_out', 'status', 'cluster_name'), (v, k) => {
                    r({ host: host, service: `elasticsearch.cluster.${k}`, metric: v });
                });

                cb();
            });
        },
        (cb) => async.each(opts[ 'es-search-index' ], (index, cb) => {
            get(`${baseUrl}${index}/_stats`, (err, json) => {
                if (err) return cb(err);

                const info  = _.get(json, '_all.total.search', {
                    query_time_in_millis: 0,
                    query_total: 1,
                    fetch_time_in_millis: 0,
                    fetch_total: 1
                });
                const query = info.query_time_in_millis / (info.query_total || 1);
                const fetch = info.fetch_time_in_millis / (info.fetch_total || 1);

                r({ host: host, service: `elasticsearch.search.query.${index}`, metric: query });
                r({ host: host, service: `elasticsearch.search.fetch.${index}`, metric: fetch });

                cb();
            });
        }, cb)
    ], cb);
});
